generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  USER
  ADMIN
}

model User {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  lastname      String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  password      String        @db.VarChar(100)
  role          RoleUser      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  profile           Profile?
  clientOrders      Order[]   @relation("ClientOrders")
  freelancerOrders  Order[]   @relation("FreelancerOrders")
  reviews           Review[]  @relation("UserReviews")
  messages          Message[]
  notifications     Notification[]
  favoriteServices  FavoriteService[]
  reporter          Report[]  @relation("ReporterRelation")
  reported          Report[]  @relation("ReportedRelation")
  services          Service[]

  @@index([name])
  @@index([lastname])
  @@index([deletedAt])
}

model Profile {
  id            String        @id @default(uuid())
  userId        String        @unique
  university    String        @db.VarChar(100)
  bio           String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  user          User          @relation(fields: [userId], references: [id])
  skills        UserSkill[]
}

model Skill {
  id            String        @id @default(uuid())
  name          String        @unique @db.VarChar(100)
  description   String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  profiles      UserSkill[]

  @@index([name])
  @@index([deletedAt])
}

model UserSkill {
  id            String        @id @default(uuid())
  profileId     String
  skillId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  level         Int           @default(1)
  description   String

  profile       Profile       @relation(fields: [profileId], references: [id])
  skill         Skill         @relation(fields: [skillId], references: [id])

  @@unique([profileId, skillId])
}

model Service {
  id            String        @id @default(uuid())
  title         String        @db.VarChar(100)
  description   String        @db.Text
  price         Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  reviewCount   Int           @default(0)
  rating        Decimal       @db.Decimal(10, 2) @default(0)
  userId        String

  serviceCategories    ServiceCategory[]
  orders               Order[]
  favoriteServices     FavoriteService[]
  user                 User   @relation(fields: [userId], references: [id])  

  @@index([title])
  @@index([description])
  @@index([deletedAt])
  @@index([rating])
  @@index([reviewCount])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique @db.VarChar(100)
  description   String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  serviceCategories    ServiceCategory[]

  @@index([name])
  @@index([description])
  @@index([deletedAt])
}

model ServiceCategory {
  id            String        @id @default(uuid())
  serviceId     String
  categoryId    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  service       Service       @relation(fields: [serviceId], references: [id])
  category      Category      @relation(fields: [categoryId], references: [id])

  @@unique([serviceId, categoryId])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  freelancerId  String
  serviceId     String
  status        OrderStatus   @default(PENDING)
  price         Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  user          User          @relation("ClientOrders", fields: [userId], references: [id])
  freelancer    User          @relation("FreelancerOrders", fields: [freelancerId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  payment       Payment[]
  review        Review?
  chat          Chat?
  reports       Report[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?

  order         Order         @relation(fields: [orderId], references: [id])
  reports       Report[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
}

model Review {
  id            String    @id @default(uuid())
  reviewerId    String 
  orderId       String    @unique
  rating        Int       @default(5)
  comment       String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  reviewer      User      @relation("UserReviews", fields: [reviewerId], references: [id])
  order         Order     @relation(fields: [orderId], references: [id])

  @@index([rating])
  @@index([deletedAt])
}

model Chat {
  id            String    @id @default(uuid())
  orderId       String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  order         Order     @relation(fields: [orderId], references: [id])
  messages      Message[]
}

model Message {
  id            String    @id @default(uuid())
  chatId        String
  senderId      String
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  chat          Chat      @relation(fields: [chatId], references: [id])
  sender        User      @relation(fields: [senderId], references: [id])
  attachments   Attachment[]
}

model Attachment {
  id            String    @id @default(uuid())
  messageId     String
  url           String    @unique @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  message       Message   @relation(fields: [messageId], references: [id])

  @@index([url])
  @@index([deletedAt])
}

model Notification {
  id          String      @id @default(uuid())
  userId      String
  type        NotificationType
  content     String      @db.Text
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  user        User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([deletedAt])
}

enum NotificationType {
  ORDER
  REPORT
  REVIEW
}

model FavoriteService {
  id          String      @id @default(uuid())
  userId      String
  serviceId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  user        User        @relation(fields: [userId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId])
  @@index([deletedAt])
}

model Report {
  id          String    @id @default(uuid())
  reporterId  String
  reportedId  String?
  orderId     String?
  paymentId   String?
  reason      String    @db.Text
  status      ReportStatus    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  reporter    User      @relation("ReporterRelation", fields: [reporterId], references: [id])
  reported    User?     @relation("ReportedRelation", fields: [reportedId], references: [id])
  order       Order?    @relation(fields: [orderId], references: [id])
  payment     Payment?  @relation(fields: [paymentId], references: [id])

  @@index([reporterId])
  @@index([reportedId])
  @@index([orderId])
  @@index([status])
  @@index([deletedAt])
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}